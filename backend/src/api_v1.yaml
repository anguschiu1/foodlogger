components:
  parameters:
    foodlog_id:
      in: path
      name: foodlog_id
      required: true
      schema:
        type: integer
    from:
      description:
        Specify starting date range (inclusive) in format 'YYYY-MM-DD'. If
        this is not provided it will return the information as '1970-01-01'.
      in: query
      name: from
      schema:
        type: string
    meal_id:
      in: path
      name: meal_id
      required: true
      schema:
        type: string
    to:
      description:
        Specify ending date range (inclusive) in format 'YYYY-MM-DD'. If
        this is not provided it will return the information as current day.
      in: query
      name: to
      schema:
        type: string
    user_id:
      description: User id
      in: path
      name: user_id
      required: true
      schema:
        type: integer
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            properties:
              errors:
                items:
                  properties:
                    message:
                      type: string
                  required:
                    - message
                  type: object
                type: array
              message:
                type: string
            required:
              - message
            type: object
      description:
        The server could not understand the request due to invalid syntax.
        The client should modify the request and try again.
    Forbidden:
      content:
        application/json:
          schema:
            properties:
              message:
                default: Forbidden
                enum:
                  - Forbidden
                type: string
            required:
              - message
            type: object
      description:
        The server understood the request, but refuses to authorize it.
        Ensure the client has appropriate permissions.
    InternalServerErrror:
      content:
        application/json:
          schema:
            properties:
              message:
                default: Internal Server Error
                enum:
                  - Internal Server Error
                type: string
            required:
              - message
            type: object
      description:
        The server encountered an unexpected condition that prevented it
        from fulfilling the request. Report the issue to the support team if it
        persists.
    NoContent:
      content: {}
      description:
        The request was successful, but there is no content to return in
        the response.
    NotFound:
      content:
        application/json:
          schema:
            properties:
              message:
                default: Not Found
                enum:
                  - Not Found
                type: string
            required:
              - message
            type: object
      description:
        The server cannot find the requested resource. The endpoint may be
        invalid or the resource may no longer exist.
    Unauthorized:
      content:
        application/json:
          schema:
            properties:
              message:
                default: Unauthorized
                enum:
                  - Unauthorized
                type: string
            required:
              - message
            type: object
      description:
        Authentication is required to access the requested resource. The
        client must include the appropriate credentials.
  schemas:
    Food:
      properties:
        id:
          type: integer
        meal_id:
          type: integer
        name:
          type: string
        weight:
          type: number
      required:
        - name
        - weight
        - meal_id
        - id
      type: object
    FoodCreate:
      description: Data transfer object for creating a new Food for one food log entry
      items:
        properties:
          name:
            type: string
          weight:
            type: number
        type: object
      type: array
      x-fiddle-dto-info:
        baseSchemaName: Food
    FoodLog:
      properties:
        date:
          type: string
        id:
          type: integer
        meals:
          items:
            $ref: '#/components/schemas/Meal'
          type: array
        owner:
          $ref: '#/components/schemas/User'
      required:
        - id
        - title
        - author
        - fullText
        - meal_name
        - meal_date
        - date
        - owner
      type: object
    FoodLogCreate:
      description: Data transfer object to create food log entry
      properties:
        date:
          type: string
        meals:
          items:
            $ref: '#/components/schemas/Meal'
          type: array
      required:
        - date
      type: object
      x-fiddle-dto-info:
        baseSchemaName: FoodLog
    Meal:
      properties:
        finished_at:
          type: string
        food_consumed:
          items:
            $ref: '#/components/schemas/Food'
          type: array
        id:
          type: integer
        image:
          type: string
        name:
          type: string
      required:
        - name
        - id
        - finished_at
        - food
      type: object
    MealCreate:
      description: Data transfer object for creating a new Meal.
      properties:
        finished_at:
          type: string
        food_consumed:
          items:
            type: string
          type: array
        name:
          type: string
      required:
        - finished_at
        - name
      type: object
      x-fiddle-dto-info:
        baseSchemaName: Meal
    User:
      properties:
        city:
          type: string
        email:
          type: string
        first_name:
          type: string
        id:
          type: integer
        last_name:
          type: string
        password:
          type: string
        isActive:
          type: boolean
      required:
        - id
        - name
        - address
        - active
      type: object
    UserCreate:
      description: Data transfer object for creating a new User.
      properties:
        city:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
      required:
        - password
        - email
      type: object
      x-fiddle-dto-info:
        baseSchemaName: User
info:
  description: Food Logger backend API for managing user food logs.
  title: Food Logger backend API
  version: 1.0.0
openapi: 3.0.0
paths:
  /foodimages/{meal_id}:
    post:
      description: Submit a food image for a meal
      operationId: submitImage
      parameters:
        - $ref: '#/components/parameters/meal_id'
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
        description: Submit a food image for a meal
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  food:
                    type: array
                    items:
                      $ref: '#/components/schemas/Food'
                  image_id:
                    type: integer
                required:
                  - food
                  - image_id
                title: SubmitImageCreated
                type: object
          description:
            Created - Resource successfully created and stored in backend and
            the recognition information is listed in JSON response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      summary: Submit image
      tags:
        - foodlogs
  /foodlogs/{user_id}:
    post:
      description:
        Creates a new daily food log entry by a user. The request must
        include the name of the meal and date time of each meals in a day.
      operationId: createAFoodLogEntry
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodLogCreate'
        description: Details of a day of food log to be created.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/FoodLog'
                  status:
                    default: success
                    enum:
                      - success
                    type: string
                required:
                  - status
                  - data
                title: CreateFoodLogCreated
                type: object
          description:
            The request was successful, and a new resource was created. The URI
            of the newly created resource can be found in the response's
            Location header.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      summary: Create a FoodLog entry
      tags:
        - foodlogs
    get:
      description:
        Fetches a list of food log entries for a user by providing User.id
        . Each FoodLog object is sorted by meal date and includes meal's name,
        date consumed and details about the food consumed in each meals.
      operationId: getFoodLogEntries
      parameters:
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FoodLog'
                title: GetFoodLogsOk
                type: array
          description: A JSON array containing a list of FoodLog objects.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      summary: Get FoodLog entries
      tags:
        - foodlogs
  /users:
    post:
      description: Create a new user
      operationId: createUser
      parameters: []
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                required:
                  - data
                title: CreateUserCreated
                type: object
          description: Created - Resource successfully created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      summary: Create User
      tags:
        - user
      requestBody:
        required: true
        description: Provide necessary user information to create a User record
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
  /users/{user_id}:
    patch:
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                required:
                  - data
                title: UpdateUserOk
                type: object
          description: OK - Resource successfully partially updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      summary: Update User
      tags:
        - user
      description: Update user by User.id
    get:
      operationId: getUser
      tags:
        - user
      summary: Get User
      responses:
        '200':
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                required:
                  - data
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      parameters:
        - $ref: '#/components/parameters/user_id'
      description: Get user profile by User.id
  /foodlogs/{user_id}/{foodlog_id}:
    delete:
      operationId: deleteFoodLogEntry
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/foodlog_id'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerErrror'
      summary: Delete FoodLog entry
      tags:
        - foodlogs
tags:
  - name: foodlogs
  - name: user
